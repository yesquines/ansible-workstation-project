- name: Create Directories
  file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
  loop: "{{ DIRETORIES }}"
  loop_control:
    label: "{{ item.path }}"
  
- name: VIM Configuration
  copy:
    src: "{{ role_path }}/files/vim/vimrc"
    dest: /etc/vim/vimrc
    backup: yes
    mode: '644'
    owner: root
    group: root
  when: enable_vim_configuration

- name: SSH Configuration (User Config File)
  copy:
    src: "{{ role_path }}/files/ssh/config"
    dest: "/root/.ssh/config"
    mode: '600'
    owner: root
    group: root
  when: enable_ssh_config_configuration

- name: Tilix Configuration - Default Terminal
  alternatives:
    name: x-terminal-emulator
    path: /usr/bin/tilix.wrapper
  when: enable_tilix_configuration

- name: Tilix Configuration
  block:
    - name: Tilix Configuration - ROOT
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop: "{{ TILIX_CONFIGURATION_ROOT }}"
      loop_control:
        label: "{{ item.key }}"
    - name: Tilix Configuration - PROFILE
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop: "{{ TILIX_CONFIGURATION_PROFILE }}"
      loop_control:
        label: "{{ item.key }}"
    - name: Tilix Configuration - KEYBINDINGS
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop: "{{ TILIX_CONFIGURATION_KEYBINDINGS }}"
      loop_control:
        label: "{{ item.key }}"
  become: yes
  become_user: "{{ COMMON_USER }}"
  when: enable_tilix_configuration

- name: Atom Configuration
  block:
    - name: Atom Configuration - Check Plugins
      stat:
        path: "/home/{{ COMMON_USER }}/.atom/packages/{{ item }}"
      register: check_atom_plugins
      loop: "{{ ATOM_PLUGINS }}"
    - name: Atom Configuration - Install Plugins
      shell: "apm install {{ item.0 }}"
      when: item.1 == False
      with_together: 
      - "{{ check_atom_plugins | json_query('results[*].item') }}"
      - "{{ check_atom_plugins | json_query('results[*].stat.exists') }}"
      loop_control:
        label: "{{ item.0 }}"
    - name: Atom Configuration - Config File
      copy:
        src: "{{ role_path }}/files/atom/config.cson"
        dest: "/home/{{ COMMON_USER }}/.atom/"
        backup: yes
        owner: "{{ COMMON_USER }}"
        group: "{{ COMMON_USER }}"
        mode: '664'
  become: yes
  become_user: "{{ COMMON_USER }}"
  when: enable_atom_install_plugins

- name: Firefox Configuration
  block:
    - name: Firefox Configuration - Check Profile
      stat:
        path: "/home/{{ COMMON_USER }}/.mozilla/firefox/default"
      register: check_firefox_profile
    - name: Firefox Configuration - Create Profile
      shell: "firefox -CreateProfile 'default /home/{{ COMMON_USER }}/.mozilla/firefox/default' --display=:0"
      when: check_firefox_profile.stat.exists == False
    - name: Firefox Configuration - Profile Files
      synchronize:
        src: "{{ role_path }}/files/firefox/"
        dest: "/home/{{ COMMON_USER }}/.mozilla/firefox/"
        perms: yes
        recursive: yes
  become: yes
  become_user: "{{ COMMON_USER }}"

- name: Bashrc Configuration
  block:
    - name: Bashrc - General Configuration
      lineinfile:
        path: "{{ item.0 }}"
        regexp: "{{ item.1.regex }}"
        line: "{{ item.1.line }}"
      with_nested: 
      - ["/root/.bashrc","/home/{{ COMMON_USER }}/.bashrc"] 
      - "{{ BASHRC_CONFIG }}"
      loop_control:
        label: "{{ item.0 }} | {{ item.1.line }}"
    - name: Bashrc - Root Configuration
      lineinfile:
        path: /root/.bashrc 
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop: "{{ BASHRC_PS1_ROOT }}"
      loop_control:
        label: "{{ item.line | regex_search('TMOUT|PS1') }}"
    - name: Bashrc - User Configuration
      lineinfile:
        path: "/home/{{ COMMON_USER }}/.bashrc"
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop: "{{ BASHRC_PS1_USER }}"
      loop_control:
        label: "{{ item.line | regex_search('PS1') }}"
    - name: Sync Bash Completion Scripts
      synchronize:
        src: "{{ role_path }}/files/profiles/bash_completion.d/"
        dest: "/etc/bash_completion.d/"
        recursive: yes
  when: enable_bashrc_configuration

- name: Sincronizando .desktops
  synchronize:
    src: "{{ role_path }}/files/desktop-files/"
    dest: "/usr/share/applications/"
    recursive: yes
  when: enable_desktop_files_configuration
 
