- name: Create Directories
  file:
    path: "{{ item.path }}"
    mode: "{{ item.mode }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    state: directory
  loop: "{{ diretories }}"
  loop_control:
    label: "{{ item.path }}"
  
- name: VIM Configuration
  copy:
    src: "{{ role_path }}/files/vim/vimrc"
    dest: /etc/vim/vimrc
    backup: yes
    mode: '644'
    owner: root
    group: root
  when: enable_vim_configuration

- name: Tilix Configuration - Default Terminal
  alternatives:
    name: x-terminal-emulator
    path: /usr/bin/tilix.wrapper
  when: enable_tilix_configuration

- name: Tilix Configuration
  block:
    - name: Tilix Configuration - ROOT
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop: "{{ tilix_configuration_root }}"
      loop_control:
        label: "{{ item.key }}"
    - name: Tilix Configuration - PROFILE
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop: "{{ tilix_configuration_profile }}"
      loop_control:
        label: "{{ item.key }}"
    - name: Tilix Configuration - KEYBINDINGS
      dconf:
        key: "{{ item.key }}"
        value: "{{ item.value }}"
        state: present
      loop: "{{ tilix_configuration_keybindings }}"
      loop_control:
        label: "{{ item.key }}"
  become: yes
  become_user: "{{ username }}"
  when: enable_tilix_configuration

- name: Atom Configuration
  block:
    - name: Atom Configuration - Check Plugins
      stat:
        path: "/home/{{ username }}/.atom/packages/{{ item }}"
      register: check_atom_plugins
      loop: "{{ atom_plugins }}"
    - set_fact:
        check_atom_plugins: '{{ {"results": []} }}'
      when: check_atom_plugins.skipped is defined
    - name: Atom Configuration - Install Plugins
      shell: "apm install {{ item.0 }}"
      when: item.1 == False
      with_together: 
      - "{{ check_atom_plugins | json_query('results[?*].item') }}"
      - "{{ check_atom_plugins | json_query('results[?*].stat.exists') }}"
      loop_control:
        label: "{{ item.0 }}"
    - name: Atom Configuration - Config File
      copy:
        src: "{{ role_path }}/files/atom/config.cson"
        dest: "/home/{{ username }}/.atom/"
        backup: yes
        owner: "{{ username }}"
        group: "{{ username }}"
        mode: '664'
  become: yes
  become_user: "{{ username }}"
  when: enable_atom_install_plugins

- name: Firefox Configuration
  block:
    - name: Firefox Configuration - Check Profile
      stat:
        path: "/home/{{ username }}/.mozilla/firefox/default"
      register: check_firefox_profile
    - name: Firefox Configuration - Create Profile
      shell: "firefox -CreateProfile 'default /home/{{ username }}/.mozilla/firefox/default' --display=:0" #It's necessary someone logged in graphical mode to enable Display :0
      when: check_firefox_profile.stat.exists == False
    - name: Firefox Configuration - Profile Files
      synchronize:
        src: "{{ role_path }}/files/firefox/"
        dest: "/home/{{ username }}/.mozilla/firefox/"
        perms: yes
        recursive: yes
    - name: Firefox Configuration - Ensure permission 
      file:
        path: "/home/{{ username }}/.mozilla/firefox/"
        owner: "{{ username }}"
        group: "{{ username }}"
        recurse: yes
        state: directory
  become: yes
  become_user: "{{ username }}"
  when: enable_firefox_configuration

- name: Bashrc Configuration
  block:
    - name: Bashrc - General Configuration
      template:
        src: bashrc.j2
        dest: "{{ item }}"
        backup: yes
      loop: 
      - /root/.bashrc
      - /home/{{ username }}/.bashrc
    - name: Bashrc - Root Configuration
      lineinfile:
        path: /root/.bashrc 
        regexp: "{{ item.regex }}"
        line: "{{ item.line }}"
      loop: "{{ bashrc_config_root }}"
      loop_control:
        label: "{{ item.line | regex_search('TMOUT|PS1') }}"
    - name: Sync Bash Completion Scripts
      synchronize:
        src: "{{ role_path }}/files/profiles/bash_completion.d"
        dest: "/tmp/"
        recursive: yes
    - name: Copy Bash Completion Scripts  
      copy:
        src: "/tmp/bash_completion.d/"
        dest: "/etc/bash_completion.d/"
        remote_src: yes
  when: enable_bashrc_configuration

- name: Block - Sync .desktops
  block:
    - name: Sync .desktops
      synchronize:
        src: "{{ role_path }}/files/desktop-files"
        dest: "/tmp/"
        recursive: yes
    - name: Copy .desktops
      copy:
        src: "/tmp/desktop-files/"
        dest: "/usr/share/applications/"
        remote_src: yes
  when: enable_desktop_files_configuration
 
